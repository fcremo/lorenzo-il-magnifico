package ui.cli.contexts;

import gamecontroller.exceptions.ActionNotAllowedException;
import ui.cli.exceptions.InvalidChoiceException;
import ui.cli.exceptions.InvalidCommandException;

import java.util.ArrayList;
import java.util.List;

public class SingleChoiceContext<T> extends Context {
    private List<Choosable<T>> allowedChoices = new ArrayList<>();

    private Callback callback = null;

    public SingleChoiceContext(UIContextInterface uiContextInterface, List<T> allowedChoices, Callback<T> callback) {
        super(uiContextInterface);
        this.callback = callback;
        this.addCommand("show", this::show, "Show possible choices");
        this.addCommand("choose", this::choose, "[index] Perform choice");

        for (T allowedChoice : allowedChoices) {
            Choosable<T> choice;

            // Cannot overload the constructor with two different types of lists because of type erasure
            // as a bonus we can pass a list objects that don't all implement Choosable,
            // as long as the identifier of the Choosable ones doesn't clash with the autogenerated identifier
            // for the ones that don't implement it
            if (allowedChoice instanceof Choosable) {
                choice = (Choosable<T>) allowedChoice;
            }
            else {
                choice = new ChoosableItem<>(allowedChoice.toString(), allowedChoice);
            }

            this.allowedChoices.add(choice);
        }
        this.printAvailableChoices();
    }

    private void show(String[] params) throws InvalidCommandException {
        if (params.length != 0) throw new InvalidCommandException("This command takes no arguments");
        printAvailableChoices();
    }

    private void printAvailableChoices() {
        uiContextInterface.println("Choose:");

        for(int i=0; i<allowedChoices.size(); i++) {
            Choosable<T> choice = allowedChoices.get(i);
            uiContextInterface.println(Integer.toString(i+1) + ") " + choice.getShortDescriptionForChoosing());
        }

        uiContextInterface.printPrompt();
    }

    private void choose(String[] params) throws InvalidCommandException, ActionNotAllowedException {
        if (params.length != 1) throw new InvalidCommandException("You have to specify what you want to choose!");

        String indexStr = params[0];
        int index;
        try {
            index = Integer.parseInt(indexStr);
            if (index < 1 || index > allowedChoices.size()) {
                throw new InvalidCommandException(String.format("Choose between 1 and %d", allowedChoices.size()));
            }
        }
        catch (NumberFormatException e) {
            throw new InvalidCommandException("Please enter a valid number");
        }

        try {
            callback.choose(allowedChoices.get(index - 1).getSelf());
        }
        catch (InvalidChoiceException e) {
            throw new InvalidCommandException("Invalid choice");
        }
    }

    @FunctionalInterface
    public interface Callback<T> {
        void choose(T choice) throws InvalidChoiceException, ActionNotAllowedException;
    }

    public interface Choosable<T> {
        String getShortDescriptionForChoosing();

        default T getSelf() {
            return (T) this;
        }
    }
}
